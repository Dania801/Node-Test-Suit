var cov_2b8orlzruc=function(){var path="/home/dania/Desktop/Test_Suit/server.js",hash="9d73ca8f1fb07f6429f906ea0498c5614b6b0cf7",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/dania/Desktop/Test_Suit/server.js",statementMap:{"0":{start:{line:2,column:14},end:{line:2,column:32}},"1":{start:{line:3,column:10},end:{line:3,column:19}},"2":{start:{line:4,column:15},end:{line:4,column:34}},"3":{start:{line:5,column:13},end:{line:5,column:30}},"4":{start:{line:6,column:17},end:{line:6,column:39}},"5":{start:{line:7,column:11},end:{line:7,column:15}},"6":{start:{line:8,column:11},end:{line:8,column:39}},"7":{start:{line:9,column:13},end:{line:9,column:30}},"8":{start:{line:11,column:14},end:{line:14,column:15}},"9":{start:{line:17,column:0},end:{line:17,column:34}},"10":{start:{line:19,column:0},end:{line:27,column:2}},"11":{start:{line:20,column:1},end:{line:20,column:42}},"12":{start:{line:21,column:10},end:{line:21,column:29}},"13":{start:{line:22,column:1},end:{line:25,column:3}},"14":{start:{line:23,column:2},end:{line:23,column:38}},"15":{start:{line:24,column:2},end:{line:24,column:9}},"16":{start:{line:26,column:1},end:{line:26,column:66}},"17":{start:{line:30,column:0},end:{line:33,column:1}},"18":{start:{line:32,column:1},end:{line:32,column:29}},"19":{start:{line:36,column:0},end:{line:36,column:27}},"20":{start:{line:37,column:0},end:{line:37,column:49}},"21":{start:{line:38,column:0},end:{line:38,column:27}},"22":{start:{line:39,column:0},end:{line:39,column:54}},"23":{start:{line:41,column:0},end:{line:41,column:77}},"24":{start:{line:41,column:27},end:{line:41,column:75}},"25":{start:{line:43,column:0},end:{line:45,column:22}},"26":{start:{line:46,column:0},end:{line:49,column:23}},"27":{start:{line:52,column:0},end:{line:52,column:17}},"28":{start:{line:53,column:0},end:{line:53,column:41}},"29":{start:{line:55,column:0},end:{line:55,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:19,column:7},end:{line:19,column:8}},loc:{start:{line:19,column:17},end:{line:27,column:1}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:17},end:{line:22,column:18}},loc:{start:{line:22,column:29},end:{line:25,column:2}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:13},end:{line:41,column:14}},loc:{start:{line:41,column:27},end:{line:41,column:75}},line:41}},branchMap:{"0":{loc:{start:{line:30,column:0},end:{line:33,column:1}},type:"if",locations:[{start:{line:30,column:0},end:{line:33,column:1}},{start:{line:30,column:0},end:{line:33,column:1}}],line:30}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();let express=(cov_2b8orlzruc.s[0]++,require('express'));let app=(cov_2b8orlzruc.s[1]++,express());let mongoose=(cov_2b8orlzruc.s[2]++,require('mongoose'));let morgan=(cov_2b8orlzruc.s[3]++,require('morgan'));let bodyParser=(cov_2b8orlzruc.s[4]++,require('body-parser'));let port=(cov_2b8orlzruc.s[5]++,8080);let book=(cov_2b8orlzruc.s[6]++,require('./app/routes/book'));let config=(cov_2b8orlzruc.s[7]++,require('config'));//we load the db location from the JSON files
//db options
let options=(cov_2b8orlzruc.s[8]++,{server:{socketOptions:{keepAlive:1,connectTimeoutMS:30000}},replset:{socketOptions:{keepAlive:1,connectTimeoutMS:30000}}});//db connection
cov_2b8orlzruc.s[9]++;mongoose.Promise=global.Promise;// Before hook
cov_2b8orlzruc.s[10]++;before(done=>{cov_2b8orlzruc.f[0]++;cov_2b8orlzruc.s[11]++;mongoose.connect(config.DBHost,options);let db=(cov_2b8orlzruc.s[12]++,mongoose.connection);cov_2b8orlzruc.s[13]++;db.once('open',function(){cov_2b8orlzruc.f[1]++;cov_2b8orlzruc.s[14]++;console.log('CONNECTED TO MONGODB');cov_2b8orlzruc.s[15]++;done();});cov_2b8orlzruc.s[16]++;db.on('error',console.error.bind(console,'connection error:'));});//don't show the log when it is test
cov_2b8orlzruc.s[17]++;if(config.util.getEnv('NODE_ENV')!=='test'){cov_2b8orlzruc.b[0][0]++;cov_2b8orlzruc.s[18]++;//use morgan to log at command line
app.use(morgan('combined'));//'combined' outputs the Apache style LOGs
}else{cov_2b8orlzruc.b[0][1]++;}//parse application/json and look for raw text
cov_2b8orlzruc.s[19]++;app.use(bodyParser.json());cov_2b8orlzruc.s[20]++;app.use(bodyParser.urlencoded({extended:true}));cov_2b8orlzruc.s[21]++;app.use(bodyParser.text());cov_2b8orlzruc.s[22]++;app.use(bodyParser.json({type:'application/json'}));cov_2b8orlzruc.s[23]++;app.get("/",(req,res)=>{cov_2b8orlzruc.f[2]++;cov_2b8orlzruc.s[24]++;return res.json({message:"Welcome to our Bookstore!"});});cov_2b8orlzruc.s[25]++;app.route("/book").get(book.getBooks).post(book.postBook);cov_2b8orlzruc.s[26]++;app.route("/book/:id").get(book.getBook).delete(book.deleteBook).put(book.updateBook);cov_2b8orlzruc.s[27]++;app.listen(port);cov_2b8orlzruc.s[28]++;console.log("Listening on port "+port);cov_2b8orlzruc.s[29]++;module.exports=app;// for testing